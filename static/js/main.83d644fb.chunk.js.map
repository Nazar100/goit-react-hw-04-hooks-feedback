{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/Button/Button.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Statisics","good","neutral","bad","total","average","rating","className","s","list","style","color","Button","option","onLeaveFeedback","onClick","FeedbackOptions","options","length","map","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","state","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAGe,SAASA,EAAT,GAA4D,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACzDC,EAASD,KAAa,GAAK,QAAU,MAEzC,OACE,qBAAIE,UAAWC,IAAEC,KAAjB,UACE,uCAAUR,KACV,0CAAaC,KACb,sCAASC,KACT,yCAAYC,OACZ,qBAAIM,MAAO,CAAEC,MAAOL,GAApB,qBAAuCD,IAAvC,U,oBCVS,SAASO,EAAT,GAA8C,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,gBACvC,OACE,wBACEC,QAAS,WACPD,EAAgBD,IAFpB,SAKGA,ICLQ,SAASG,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASH,EAAmB,EAAnBA,gBACjD,OAAuB,IAAnBG,EAAQC,OAAqB,KAG/B,oBAAIX,UAAWC,IAAEC,KAAjB,SACGQ,EAAQE,KAAI,SAAAN,GACX,OACE,6BACE,cAACD,EAAD,CAAQE,gBAAiBA,EAAiBD,OAAQA,KAD3CA,QCTJ,SAASO,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,ICGd,IAAMP,EAAU,CAAC,OAAQ,UAAW,OAwDrBQ,MAtDf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNzB,EADM,KACA0B,EADA,OAEiBD,mBAAS,GAF1B,mBAENxB,EAFM,KAEG0B,EAFH,OAGSF,mBAAS,GAHlB,mBAGNvB,EAHM,KAGD0B,EAHC,KAqBPC,EAAqB,WACzB,OAAO7B,EAAOC,EAAUC,GAO1B,OACE,gCACE,cAACiB,EAAD,CAASC,MAAM,6BAAf,SACE,cAACL,EAAD,CAAiBC,QAASA,EAASH,gBA3BjB,SAAAiB,GACtB,OAAQA,GACN,IAAK,OACHJ,GAAQ,SAAAK,GAAK,OAAIA,EAAQ,KACzB,MACF,IAAK,UACHJ,GAAW,SAAAI,GAAK,OAAIA,EAAQ,KAC5B,MACF,IAAK,MACHH,GAAO,SAAAG,GAAK,OAAIA,EAAQ,KACxB,MACF,QACE,aAkBDF,IAAuB,GACtB,cAACV,EAAD,CAASC,MAAM,aAAf,SACE,cAAC,EAAD,CACEpB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,EACPzB,QAjB8B,WACtC,OAAO4B,KAAKC,MAAOjC,GAAQA,EAAOC,EAAUC,GAAQ,UAqBxB,IAAzB2B,KACC,cAACP,EAAD,CAAcC,QAAQ,0BC5CfW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,KAAO,iC","file":"static/js/main.83d644fb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nexport default function Statisics({ good, neutral, bad, total, average }) {\n  let rating = average() >= 50 ? 'green' : 'red';\n\n  return (\n    <ul className={s.list}>\n      <li>Good:{good}</li>\n      <li>Neutral:{neutral}</li>\n      <li>Bad:{bad}</li>\n      <li>Total: {total()}</li>\n      <li style={{ color: rating }}>Average:{average()}%</li>\n    </ul>\n  );\n}\n\nStatisics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.func.isRequired,\n  average: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Button({ option, onLeaveFeedback }) {\n  return (\n    <button\n      onClick={() => {\n        onLeaveFeedback(option);\n      }}\n    >\n      {option}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  option: PropTypes.string.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes, { arrayOf } from 'prop-types';\nimport s from './FeedbackOptions.module.css';\nimport Button from './Button/Button';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  if (options.length === 0) return null;\n\n  return (\n    <ul className={s.list}>\n      {options.map(option => {\n        return (\n          <li key={option}>\n            <Button onLeaveFeedback={onLeaveFeedback} option={option} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: arrayOf(PropTypes.string.isRequired),\n};\n","import PropTypes from 'prop-types';\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <h1>{message}</h1>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React, { Component, useState } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nconst options = ['good', 'neutral', 'bad'];\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = e => {\n    switch (e) {\n      case 'good':\n        setGood(state => state + 1);\n        break;\n      case 'neutral':\n        setNeutral(state => state + 1);\n        break;\n      case 'bad':\n        setBad(state => state + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / (good + neutral + bad)) * 100);\n  };\n\n  return (\n    <div>\n      <Section title=\"Please leave your feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n\n      {countTotalFeedback() > 0 && (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback}\n            average={countPositiveFeedbackPercentage}\n          />\n        </Section>\n      )}\n\n      {countTotalFeedback() === 0 && (\n        <Notification message=\"No feedback given\" />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3oKT7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__2lRUp\"};"],"sourceRoot":""}